{"version":3,"file":"main.18fcdabcd5b9e7e2eb36.js","mappings":"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","sources":["webpack://webpack-vanilla/./node_modules/date-fns/constructFrom.mjs","webpack://webpack-vanilla/./node_modules/date-fns/_lib/defaultOptions.mjs","webpack://webpack-vanilla/./node_modules/date-fns/getDefaultOptions.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/_lib/buildMatchFn.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/en-US.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/en-US/_lib/localize.mjs","webpack://webpack-vanilla/./node_modules/date-fns/locale/en-US/_lib/match.mjs","webpack://webpack-vanilla/./node_modules/date-fns/toDate.mjs","webpack://webpack-vanilla/./node_modules/date-fns/_lib/format/longFormatters.mjs","webpack://webpack-vanilla/./node_modules/date-fns/_lib/protectedTokens.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/Setter.mjs","webpack://webpack-vanilla/./node_modules/date-fns/transpose.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/Parser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/constants.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/constants.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/utils.mjs","webpack://webpack-vanilla/./node_modules/date-fns/startOfWeek.mjs","webpack://webpack-vanilla/./node_modules/date-fns/getWeekYear.mjs","webpack://webpack-vanilla/./node_modules/date-fns/startOfISOWeek.mjs","webpack://webpack-vanilla/./node_modules/date-fns/getWeek.mjs","webpack://webpack-vanilla/./node_modules/date-fns/startOfWeekYear.mjs","webpack://webpack-vanilla/./node_modules/date-fns/getISOWeekYear.mjs","webpack://webpack-vanilla/./node_modules/date-fns/getISOWeek.mjs","webpack://webpack-vanilla/./node_modules/date-fns/startOfISOWeekYear.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/DateParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/addDays.mjs","webpack://webpack-vanilla/./node_modules/date-fns/setDay.mjs","webpack://webpack-vanilla/./node_modules/date-fns/setISODay.mjs","webpack://webpack-vanilla/./node_modules/date-fns/getISODay.mjs","webpack://webpack-vanilla/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/EraParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/YearParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/QuarterParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/MonthParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/setWeek.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/setISOWeek.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/DayParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/ISODayParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/AMPMParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/MinuteParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/SecondParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.mjs","webpack://webpack-vanilla/./node_modules/date-fns/parse.mjs","webpack://webpack-vanilla/./node_modules/date-fns/startOfDay.mjs","webpack://webpack-vanilla/./node_modules/date-fns/getDayOfYear.mjs","webpack://webpack-vanilla/./node_modules/date-fns/differenceInCalendarDays.mjs","webpack://webpack-vanilla/./node_modules/date-fns/startOfYear.mjs","webpack://webpack-vanilla/./node_modules/date-fns/_lib/addLeadingZeros.mjs","webpack://webpack-vanilla/./node_modules/date-fns/_lib/format/lightFormatters.mjs","webpack://webpack-vanilla/./node_modules/date-fns/_lib/format/formatters.mjs","webpack://webpack-vanilla/./node_modules/date-fns/isValid.mjs","webpack://webpack-vanilla/./node_modules/date-fns/isDate.mjs","webpack://webpack-vanilla/./node_modules/date-fns/format.mjs","webpack://webpack-vanilla/./src/js/controller.js","webpack://webpack-vanilla/./src/js/view.js","webpack://webpack-vanilla/./src/js/forecast.js","webpack://webpack-vanilla/./src/js/currentWeather.js","webpack://webpack-vanilla/./src/js/processDataWrapper.js","webpack://webpack-vanilla/./src/js/visualCrossingProcessor.js","webpack://webpack-vanilla/./src/js/dailyWeather.js","webpack://webpack-vanilla/./src/js/index.js"],"sourcesContent":["/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","import { transpose } from \"../../transpose.mjs\";\nimport { constructFrom } from \"../../constructFrom.mjs\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateToSystemTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, Date));\n  }\n}\n","import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam DateInputType - The input `Date` type derived from the passed argument.\n * @typeParam DateOutputType - The output `Date` type derived from the passed constructor.\n *\n * @param fromDate - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(fromDate, constructor) {\n  const date =\n    constructor instanceof Date\n      ? constructFrom(constructor, 0)\n      : new constructor(0);\n  date.setFullYear(\n    fromDate.getFullYear(),\n    fromDate.getMonth(),\n    fromDate.getDate(),\n  );\n  date.setHours(\n    fromDate.getHours(),\n    fromDate.getMinutes(),\n    fromDate.getSeconds(),\n    fromDate.getMilliseconds(),\n  );\n  return date;\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { ValueSetter } from \"./Setter.mjs\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.mjs\";\nimport { numericPatterns } from \"./constants.mjs\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.mjs\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { addDays } from \"./addDays.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const currentDay = _date.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(_date, diff);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { addDays } from \"./addDays.mjs\";\nimport { getISODay } from \"./getISODay.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day) {\n  const _date = toDate(date);\n  const currentDay = getISODay(_date);\n  const diff = day - currentDay;\n  return addDays(_date, diff);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date) {\n  const _date = toDate(date);\n  let day = _date.getDay();\n\n  if (day === 0) {\n    day = 7;\n  }\n\n  return day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { EraParser } from \"./parsers/EraParser.mjs\";\nimport { YearParser } from \"./parsers/YearParser.mjs\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.mjs\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.mjs\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.mjs\";\nimport { QuarterParser } from \"./parsers/QuarterParser.mjs\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.mjs\";\nimport { MonthParser } from \"./parsers/MonthParser.mjs\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.mjs\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.mjs\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.mjs\";\nimport { DateParser } from \"./parsers/DateParser.mjs\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.mjs\";\nimport { DayParser } from \"./parsers/DayParser.mjs\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.mjs\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.mjs\";\nimport { ISODayParser } from \"./parsers/ISODayParser.mjs\";\nimport { AMPMParser } from \"./parsers/AMPMParser.mjs\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.mjs\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.mjs\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.mjs\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.mjs\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.mjs\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.mjs\";\nimport { MinuteParser } from \"./parsers/MinuteParser.mjs\";\nimport { SecondParser } from \"./parsers/SecondParser.mjs\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.mjs\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.mjs\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.mjs\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.mjs\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- It's ok, we want any here\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { Parser } from \"../Parser.mjs\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.mjs\";\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.mjs\";\nimport { constructFrom } from \"../../../constructFrom.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigitsSigned } from \"../utils.mjs\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { parseNDigitsSigned } from \"../utils.mjs\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setWeek } from \"../../../setWeek.mjs\";\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\nimport { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getWeek } from \"./getWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const _date = toDate(date);\n  const diff = getWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { setISOWeek } from \"../../../setISOWeek.mjs\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.mjs\";\nimport { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getISOWeek } from \"./getISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week) {\n  const _date = toDate(date);\n  const diff = getISOWeek(_date) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.mjs\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISODay } from \"../../../setISODay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { dayPeriodEnumToHours } from \"../utils.mjs\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { dayPeriodEnumToHours } from \"../utils.mjs\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { dayPeriodEnumToHours } from \"../utils.mjs\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { timezonePatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseTimezonePattern } from \"../utils.mjs\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { timezonePatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseTimezonePattern } from \"../utils.mjs\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseAnyDigitsSigned } from \"../utils.mjs\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseAnyDigitsSigned } from \"../utils.mjs\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getDefaultOptions } from \"./getDefaultOptions.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { parsers } from \"./parse/_lib/parsers.mjs\";\nimport { DateToSystemTimezoneSetter } from \"./parse/_lib/Setter.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { longFormatters, parsers };\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (formatStr === \"\") {\n    if (dateStr === \"\") {\n      return toDate(referenceDate);\n    } else {\n      return constructFrom(referenceDate, NaN);\n    }\n  }\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will be set to the system timezone\n  const setters = [new DateToSystemTimezoneSetter()];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return constructFrom(referenceDate, NaN);\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return constructFrom(referenceDate, NaN);\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return constructFrom(referenceDate, NaN);\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate);\n\n  if (isNaN(date.getTime())) {\n    return constructFrom(referenceDate, NaN);\n  }\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return constructFrom(referenceDate, NaN);\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return constructFrom(referenceDate, date);\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import createForecast from './forecast';\nimport createView from './view';\n\nexport default function createController() {\n  const locationForm = document.querySelector('form');\n  const locationField = document.querySelector('#location');\n  const temperatureSelector = document.querySelector('#temperature-scale');\n  const view = createView();\n  let forecast = null;\n\n  function loadWeather(data) {\n    forecast = createForecast(data);\n    view.displayCurrentWeather(forecast.currentWeather, forecast.getLocation());\n    view.displayDailyWeather(forecast.dailyWeather);\n    locationForm.reset();\n  }\n\n  async function fetchWeather(searchQuery, unitGroup) {\n    view.displayLoading();\n\n    try {\n      const response = await fetch(\n        `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${searchQuery}/` +\n          `next7days?unitGroup=${unitGroup}&elements=datetime%2CresolvedAddress%2Ctempmax%2Ctempmin%2Ctemp%2Cfeelslike%2C` +\n          'precipprob%2Cconditions%2Cicon&include=fcst%2Cdays%2Ccurrent&key=8KTRXTELZJ2FLALH7ANX7K72L&contentType=json',\n      );\n      if (!response.ok) {\n        throw new Error('Invalid Location');\n      }\n\n      const data = await response.json();\n      loadWeather(data);\n    } catch (error) {\n      forecast = null;\n\n      if (error.message === 'Invalid Location') {\n        view.displayNoLocationFound(searchQuery);\n      } else {\n        console.log(error);\n      }\n    }\n  }\n\n  function setupSearchHandler() {\n    locationForm.addEventListener('submit', (e) => {\n      e.preventDefault();\n\n      let unitGroup = temperatureSelector.value === 'fahrenheit' ? 'us' : 'uk';\n      fetchWeather(locationField.value, unitGroup);\n    });\n  }\n\n  function setupTemperatureConverter() {\n    temperatureSelector.addEventListener('change', () => {\n      if (forecast === null) return;\n\n      if (temperatureSelector.value === 'fahrenheit') {\n        forecast.convertFahrenheitToCelsius();\n      } else {\n        forecast.convertCelsiusToFahrenheit();\n      }\n\n      view.displayCurrentWeather(\n        forecast.currentWeather,\n        forecast.getLocation(),\n      );\n      view.displayDailyWeather(forecast.dailyWeather);\n    });\n  }\n\n  function init() {\n    setupSearchHandler();\n    setupTemperatureConverter();\n    fetchWeather('Philadelphia', 'us');\n  }\n\n  return { init };\n}\n","import { format, parse } from 'date-fns';\n\nexport default function createView() {\n  const content = document.querySelector('.content');\n\n  function displayDailyWeather(dailyWeather) {\n    const dailyWeatherTitle = document.createElement('h2');\n    dailyWeatherTitle.textContent = 'Weekly Forecast';\n    dailyWeatherTitle.classList.add('section-title');\n    const dailyWeatherContainer = document.createElement('div');\n\n    dailyWeatherContainer.appendChild(displayDay(dailyWeather[0], 'Today'));\n\n    for (const day of dailyWeather.slice(1)) {\n      dailyWeatherContainer.appendChild(displayDay(day));\n    }\n    dailyWeatherContainer.classList.add('daily-weather-container', 'card');\n    content.append(dailyWeatherTitle, dailyWeatherContainer);\n  }\n\n  function displayDay(day, dayOfTheWeek = null) {\n    const dailyWeatherContainer = document.createElement('div');\n    const weatherInfo = document.createElement('div');\n    weatherInfo.className = 'daily-weather-info';\n\n    const dayName = document.createElement('div');\n    dayName.textContent =\n      dayOfTheWeek === null\n        ? convertToDayOfTheWeek(day.getDatetime())\n        : dayOfTheWeek;\n    dayName.className = 'day-of-the-week';\n    const minTemperature = document.createElement('div');\n    minTemperature.textContent = `${day.getMinTemperature()}°`;\n    minTemperature.className - 'min-temp';\n    const temperatureDivider = document.createElement('div');\n    temperatureDivider.textContent = ' /  ';\n    const maxTemperature = document.createElement('div');\n    maxTemperature.textContent = `${day.getMaxTemperature()}°`;\n    maxTemperature.className = 'max-temp';\n    const precipitationProbability = document.createElement('div');\n    precipitationProbability.textContent = `${day.getPrecipitationProbability()}%`;\n    precipitationProbability.className = 'precip-prob';\n    const precipitationIcon = document.createElement('div');\n    precipitationIcon.className = 'precip-prob-icon';\n    const precipitationWrapper = document.createElement('div');\n    precipitationWrapper.classList.add('precipitation-wrapper');\n    precipitationWrapper.append(precipitationIcon, precipitationProbability);\n    const icon = document.createElement('div');\n    icon.classList.add(day.getIcon(), 'daily-weather-icon');\n    const temperatureRange = document.createElement('div');\n    temperatureRange.append(maxTemperature, temperatureDivider, minTemperature);\n    temperatureRange.classList.add('temp-range');\n    weatherInfo.append(icon, temperatureRange, precipitationWrapper);\n    dailyWeatherContainer.append(dayName, weatherInfo);\n    dailyWeatherContainer.classList.add('daily-weather');\n    return dailyWeatherContainer;\n  }\n\n  function displayCurrentWeather(currentWeather, location) {\n    const currentWeatherContainer = document.createElement('div');\n    const currentWeatherTitle = document.createElement('h2');\n    currentWeatherTitle.textContent = 'Today';\n    currentWeatherTitle.classList.add('section-title');\n    const currentWeatherConditions = document.createElement('div');\n    const bottomCurrentWeatherConditions = document.createElement('div');\n    const locationElement = document.createElement('div');\n    locationElement.textContent = location;\n    locationElement.className = 'resolved-address';\n    const conditions = document.createElement('div');\n    conditions.textContent = currentWeather.getConditions();\n    const currentDatetime = document.createElement('div');\n    currentDatetime.textContent = `As of ${convertTo12Hour(\n      currentWeather.getCurrentDatetime(),\n    )}`;\n    currentDatetime.classList.add('current-weather-time');\n    const feelsLike = document.createElement('div');\n    feelsLike.textContent = `Feels like ${currentWeather.getFeelsLike()}°`;\n    feelsLike.classList.add('feels-like');\n    const temperature = document.createElement('div');\n    temperature.textContent = `${currentWeather.getTemperature()}°`;\n    const icon = document.createElement('div');\n    icon.classList.add(currentWeather.getIcon(), 'current-weather-icon');\n    const currentWeatherInfo = document.createElement('div');\n    currentWeatherInfo.append(temperature, icon);\n    currentWeatherInfo.className = 'current-weather-info';\n    bottomCurrentWeatherConditions.append(feelsLike, currentDatetime);\n    currentWeatherConditions.append(\n      locationElement,\n      conditions,\n      currentWeatherInfo,\n      bottomCurrentWeatherConditions,\n    );\n    bottomCurrentWeatherConditions.classList.add('bottom-current-weather');\n    currentWeatherConditions.classList.add('current-weather', 'card');\n    currentWeatherContainer.classList.add('current-weather-container');\n    currentWeatherContainer.append(currentWeatherConditions);\n    content.replaceChildren(currentWeatherTitle, currentWeatherContainer);\n  }\n\n  function displayNoLocationFound(searchQuery) {\n    const currentWeatherTitle = document.createElement('h2');\n    currentWeatherTitle.textContent = `Could not find location '${searchQuery}'`;\n    currentWeatherTitle.classList.add('invalid-location');\n    content.replaceChildren(currentWeatherTitle);\n  }\n\n  function convertTo12Hour(dateTime24) {\n    const date = parse(dateTime24, 'HH:mm:ss', new Date());\n\n    return format(date, 'h:mm a');\n  }\n\n  function convertToDayOfTheWeek(datetime) {\n    const date = parse(datetime, 'yyyy-MM-dd', new Date());\n\n    return format(date, 'iiii');\n  }\n\n  function displayLoading() {\n    const loadingStatus = document.createElement('h2');\n    loadingStatus.textContent = 'Loading...';\n    loadingStatus.classList.add('loading');\n    content.replaceChildren(loadingStatus);\n  }\n\n  return {\n    displayDailyWeather,\n    displayCurrentWeather,\n    displayNoLocationFound,\n    displayLoading,\n  };\n}\n","import createCurrentWeather from './currentWeather';\nimport createDailyWeather from './dailyWeather';\nimport {\n  processCurrentWeather,\n  processDailyWeather,\n} from './processDataWrapper';\n\nexport default function createForecast(data) {\n  const location = data.resolvedAddress;\n\n  const currentWeather = createCurrentWeather(processCurrentWeather(data));\n  const dailyWeather = createDailyWeather(processDailyWeather(data));\n\n  return {\n    currentWeather,\n    dailyWeather,\n    getLocation: () => location,\n    convertCelsiusToFahrenheit: () => {\n      currentWeather.convertCelsiusToFahrenheit();\n      dailyWeather.forEach((daily) => {\n        daily.convertCelsiusToFahrenheit();\n      });\n    },\n    convertFahrenheitToCelsius: () => {\n      currentWeather.convertFahrenheitToCelsius();\n      dailyWeather.forEach((daily) => {\n        daily.convertFahrenheitToCelsius();\n      });\n    },\n  };\n}\n","export default function createCurrentWeather({\n  currentDatetime,\n  temperature,\n  feelsLike,\n  conditions,\n  icon,\n}) {\n  return {\n    getCurrentDatetime: () => currentDatetime,\n    getTemperature: () => Math.round(temperature),\n    getFeelsLike: () => Math.round(feelsLike),\n    getConditions: () => conditions,\n    getIcon: () => icon,\n\n    convertCelsiusToFahrenheit: () => {\n      temperature = (temperature - 32) * (5 / 9);\n      feelsLike = (feelsLike - 32) * (5 / 9);\n    },\n    convertFahrenheitToCelsius: () => {\n      temperature = (9 / 5) * temperature + 32;\n      feelsLike = (9 / 5) * feelsLike + 32;\n    },\n  };\n}\n","import {\n  processVisualCrossingCurrentWeather,\n  processVisualCrossingDailyWeather,\n} from './visualCrossingProcessor';\n\nexport function processCurrentWeather(data) {\n  return processVisualCrossingCurrentWeather(data);\n}\n\nexport function processDailyWeather(data) {\n  return processVisualCrossingDailyWeather(data);\n}\n","export function processVisualCrossingCurrentWeather(data) {\n  return {\n    currentDatetime: data.currentConditions.datetime,\n    temperature: data.currentConditions.temp,\n    feelsLike: data.currentConditions.feelslike,\n    conditions: data.currentConditions.conditions,\n    icon: data.currentConditions.icon,\n  };\n}\n\nexport function processVisualCrossingDailyWeather(data) {\n  return data.days.map((dailyData) => ({\n    datetime: dailyData.datetime,\n    minTemperature: dailyData.tempmin,\n    maxTemperature: dailyData.tempmax,\n    precipitationProbability: dailyData.precipprob,\n    icon: dailyData.icon,\n  }));\n}\n","export default function createDailyWeather(dailyWeatherDataList) {\n  return dailyWeatherDataList.map((dailyData) => ({\n    getDatetime: () => dailyData.datetime,\n    getMinTemperature: () => Math.round(dailyData.minTemperature),\n    getMaxTemperature: () => Math.round(dailyData.maxTemperature),\n    getPrecipitationProbability: () =>\n      Math.round(dailyData.precipitationProbability),\n    getIcon: () => dailyData.icon,\n    convertCelsiusToFahrenheit: () => {\n      dailyData.minTemperature = (dailyData.minTemperature - 32) * (5 / 9);\n      dailyData.maxTemperature = (dailyData.maxTemperature - 32) * (5 / 9);\n    },\n    convertFahrenheitToCelsius: () => {\n      dailyData.minTemperature = (9 / 5) * dailyData.minTemperature + 32;\n      dailyData.maxTemperature = (9 / 5) * dailyData.maxTemperature + 32;\n    },\n  }));\n}\n","import 'normalize.css';\nimport '../css/style.css';\n\nimport createController from './controller';\n\nconst app = createController();\napp.init();\n"],"names":["constructFrom","date","value","Date","constructor","defaultOptions","getDefaultOptions","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","options","width","String","defaultWidth","formats","formatLong","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","array","predicate","length","test","findIndex","object","Object","prototype","hasOwnProperty","call","findKey","valueCallback","rest","slice","enUS","code","formatDistance","token","count","result","tokenValue","replace","toString","addSuffix","comparison","formatRelative","_date","_baseDate","_options","localize","ordinalNumber","dirtyNumber","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","index","weekStartsOn","firstWeekContainsDate","toDate","argument","argStr","NaN","dateLongFormatter","pattern","timeLongFormatter","longFormatters","p","P","datePattern","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","warnOrThrowProtectedError","format","input","_message","subject","toLowerCase","message","console","warn","includes","RangeError","Setter","subPriority","validate","_utcDate","ValueSetter","validateValue","setValue","priority","super","this","set","flags","DateToSystemTimezoneSetter","timestampIsSet","fromDate","setFullYear","getFullYear","getMonth","getDate","setHours","getHours","getMinutes","getSeconds","getMilliseconds","transpose","Parser","run","dateString","parse","setter","_value","Math","pow","millisecondsInWeek","millisecondsInDay","numericPatterns","timezonePatterns","mapValue","parseFnResult","mapFn","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","trunc","isLeapYearIndex","year","startOfWeek","locale","getDay","diff","setDate","getWeekYear","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","getTime","startOfISOWeek","getWeek","firstWeek","startOfWeekYear","round","getISOWeekYear","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","getISOWeek","fourthOfJanuary","startOfISOWeekYear","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","addDays","amount","isNaN","setDay","currentDay","delta","setISODay","getISODay","getTimezoneOffsetInMilliseconds","utcDate","UTC","setUTCFullYear","parsers","G","incompatibleTokens","y","isTwoDigitYear","unit","normalizedTwoDigitYear","Y","R","_flags","firstWeekOfYear","u","Q","setMonth","q","M","L","w","week","setWeek","I","setISOWeek","d","isLeapYear","D","subpriority","E","e","wholeWeekDays","floor","c","i","a","b","B","h","isPM","H","K","k","hours","m","setMinutes","s","setSeconds","S","setMilliseconds","X","x","t","T","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","dateStr","formatStr","referenceDate","assign","subFnOptions","setters","tokens","map","substring","firstCharacter","longFormatter","join","usedTokens","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","parser","incompatibleToken","find","usedToken","fullToken","push","indexOf","uniquePrioritySetters","sort","filter","setterArray","startOfDay","getDayOfYear","dateLeft","dateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","differenceInCalendarDays","cleanDate","startOfYear","addLeadingZeros","targetLength","abs","padStart","lightFormatters","signedYear","dayPeriodEnumValue","toUpperCase","numberOfDigits","milliseconds","formatters","signedWeekYear","weekYear","ceil","isoWeek","dayOfYear","dayOfWeek","localDayOfWeek","isoDayOfWeek","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","O","formatTimezoneShort","z","offset","delimiter","sign","absOffset","minutes","isValid","originalDate","parts","isToken","preprocessor","formatterOptions","part","formatter","matched","locationForm","document","querySelector","locationField","temperatureSelector","view","content","displayDay","dayOfTheWeek","arguments","undefined","dailyWeatherContainer","createElement","weatherInfo","className","dayName","textContent","getDatetime","minTemperature","getMinTemperature","temperatureDivider","maxTemperature","getMaxTemperature","precipitationProbability","getPrecipitationProbability","precipitationIcon","precipitationWrapper","classList","add","append","icon","getIcon","temperatureRange","displayDailyWeather","dailyWeather","dailyWeatherTitle","appendChild","displayCurrentWeather","currentWeather","location","currentWeatherContainer","currentWeatherTitle","currentWeatherConditions","bottomCurrentWeatherConditions","locationElement","conditions","getConditions","currentDatetime","dateTime24","getCurrentDatetime","feelsLike","getFeelsLike","temperature","getTemperature","currentWeatherInfo","replaceChildren","displayNoLocationFound","searchQuery","displayLoading","loadingStatus","createView","forecast","async","fetchWeather","unitGroup","response","fetch","ok","Error","data","json","resolvedAddress","_ref","convertCelsiusToFahrenheit","convertFahrenheitToCelsius","createCurrentWeather","currentConditions","datetime","temp","feelslike","processVisualCrossingCurrentWeather","processCurrentWeather","dailyWeatherDataList","days","dailyData","tempmin","tempmax","precipprob","processVisualCrossingDailyWeather","processDailyWeather","getLocation","forEach","daily","createForecast","reset","error","log","init","addEventListener","preventDefault","createController"],"sourceRoot":""}